// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 2
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best even-toed ungulate fur available"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const millerID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Miller: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function shearItem() that allows a farmer to shear an alpaca", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addMiller(millerID);
        await supplyChain.addRetailer(retailerID);
        await supplyChain.addConsumer(consumerID);

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sheared()
        var event = supplyChain.Sheared()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sheared by calling function shearItem()
        await supplyChain.shearItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function packRawItem() that allows a farmer to pack alpaca wool", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event RawPacked()
        var event = supplyChain.RawPacked()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function packRawItem()
        await supplyChain.packRawItem(upc, { from: originFarmerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
        
    })    

    // 3rd Test
    it("Testing smart contract function shipRawItem() that allows a farmer to ship raw alpaca wool", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event RawShipped()
        var event = supplyChain.RawShipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as RawShipped by calling function shipRawItem()
        await supplyChain.shipRawItem(upc, millerID, { from: originFarmerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], millerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State'),
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
        
    })    

    // 4th Test
    it("Testing smart contract function receiveRawItem() that allows a miller to receive raw item", async() => {
        const supplyChain = await SupplyChain.deployed()
 
        var eventEmitted = false
        
        var event = supplyChain.RawReceived()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        await supplyChain.receiveRawItem(upc, { from: millerID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], millerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State'),
        assert.equal(resultBufferTwo[6], millerID, 'Error: Invalid millerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   

    })    

    // 5th Test
    it("Testing smart contract function millItem() that allows a miller to mill raw item", async() => {
        const supplyChain = await SupplyChain.deployed()
 
        var eventEmitted = false
        
        var event = supplyChain.Milled()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        await supplyChain.millItem(upc, { from: millerID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], millerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State'),
        assert.equal(resultBufferTwo[6], millerID, 'Error: Invalid millerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   

    })  

    // 6th Test
    it("Testing smart contract function shipItem() that allows a miller to pack item", async() => {
        const supplyChain = await SupplyChain.deployed()
 
        var eventEmitted = false
        
        var event = supplyChain.Packed()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        await supplyChain.packItem(upc, { from: millerID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], millerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State'),
        assert.equal(resultBufferTwo[6], millerID, 'Error: Invalid millerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   

    })    

    // 7th Test
    it("Testing smart contract function shipItem() that allows a miller to ship item", async() => {
        const supplyChain = await SupplyChain.deployed()
 
        var eventEmitted = false
        
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        await supplyChain.shipItem(upc, retailerID, { from: millerID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State'),
        assert.equal(resultBufferTwo[6], millerID, 'Error: Invalid millerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   

    })  

    //8th Test
    it("Testing smart contract function receiveItem() that allows a retailer to receive item", async() => {
        const supplyChain = await SupplyChain.deployed()
 
        var eventEmitted = false
        
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        await supplyChain.receiveItem(upc, { from: retailerID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], millerID, 'Error: Invalid millerID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   

    }) 

    //9th Test
    it("Testing smart contract function sellItem() that allows a retailer to put an item up for sale", async() => {
        const supplyChain = await SupplyChain.deployed()
 
        var eventEmitted = false
        
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        await supplyChain.sellItem(upc, productPrice, { from: retailerID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], millerID, 'Error: Invalid millerID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   

    }) 
   
    //10th Test
    it("Testing smart contract function buyItem() that allows a consumer to buy an item", async() => {
        const supplyChain = await SupplyChain.deployed()
 
        var eventEmitted = false
        
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        await supplyChain.buyItem(upc, { from: consumerID, value: productPrice });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], millerID, 'Error: Invalid millerID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   

    }) 


    // 11th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        assert.equal(resultBufferOne[0].valueOf(), sku, 'Error: Missing or Invalid sku')
        assert.equal(resultBufferOne[1].valueOf(), upc, 'Error: Missing or Invalid upc')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        
    })

    // 12th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid sku')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid upc')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid productNotes')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], millerID, 'Error: Invalid millerID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID')
        
    })

});

